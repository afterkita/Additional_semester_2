// Additional_3 (2 еместр).cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <stdlib.h>
#include <iostream>
using namespace std;

struct Node                             
{
    int x;                            
    Node* Next, * Prev;                 
};

class List                              
{
    Node* Head, * Tail;                 
public:
    List() :Head(NULL), Tail(NULL) {};   
    ~List();                           
    void Show();                       
    void Add(int x);  
    Node* Find(int n);
};

List::~List()    //Деструктор
{
    while (Head)                     
    {
        Tail = Head->Next; 
        delete Head;  
        Head = Tail; 
    }
}

void List::Add(int x)
{
    Node* q = new Node;               
    q->Next = NULL;        
    q->x = x;    

    if (Head != NULL)//Если список не пуст
    {
        q->Prev = Tail;               
        Tail->Next = q;               
        Tail = q;                     
    }
    else //Если список пустой
    {
        q->Prev = NULL;     
        Head = Tail = q;  
    }
}
Node* List::Find(int n)
{
    Node* q = Tail; 
    while (q != NULL)  
    {
        if (q->x == n)
        {
            return q;
        }
        q = q->Prev;            
    }
    return NULL;
}
void List::Show()
{
    //ВЫВОДИМ СПИСОК С КОНЦА
    Node* q = Tail;                   //Временный указатель на адрес последнего элемента

    while (q != NULL)               //Пока не встретится пустое значение
    {
        cout << q->x << " ";        //Выводить значение на экран
        q = q->Prev;             //Указываем, что нужен адрес предыдущего элемента
    }
    cout << "\n";

    //ВЫВОДИМ СПИСОК С НАЧАЛА
    q = Head;                       //Временно указываем на адрес первого элемента
    while (q != NULL)              //Пока не встретим пустое значение
    {
        cout << q->x << " ";        //Выводим каждое считанное значение на экран
        q = q->Next;             //Смена адреса на адрес следующего элемента
    }
    cout << "\n";
}

int main()
{
    List lst;
    lst.Add(100);
    lst.Add(200);
    lst.Add(900);
    lst.Add(888);

    lst.Show();
    if (lst.Find(200) != NULL)
    {
        cout << "!!!";
    }
    if (lst.Find(300) != NULL)
    {
        cout << "T!!";
    }
    system("PAUSE");
    return 0;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
